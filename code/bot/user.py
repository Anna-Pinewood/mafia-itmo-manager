import bot.keyboards as kb

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.requests import (check_ban, check_event_by_name, add_in_mailing, get_event_info_by_name, check_signup,
                               check_go_to_event, get_full_info_about_singup_user, change_signup_status, add_signup_user,
                               get_count_of_events, check_is_signup_open, get_signup_people)
from re import compile, search

# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å dispatcher 2-–π —Ä–∞–∑ –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä
user = Router()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


class BannedProtect(Filter):
    async def __call__(self, message: Message):
        return await check_ban(chat_id=message.from_user.id)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è-–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


class EventCheck(Filter):
    async def __call__(self, message: Message):
        return await check_event_by_name(event_name=message.text)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ


class EventSignUp(StatesGroup):
    event_name = State()
    full_name = State()
    id = State()
    phone = State()
    confirm = State()

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞–π–¥–∏


@user.message(Command("id"))
async def id_command(message: Message):
    await message.answer(f"–í–∞—à –∞–π–¥–∏: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@user.message(BannedProtect())
async def show_message_to_ban_user(message: Message):
    await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")


@user.message(CommandStart())
async def start_command(message: Message):
    await add_in_mailing(chat_id=message.from_user.id)
    sticker_id = "CAACAgIAAxkBAAEuSs5nBl1rNuFirPiPXjRVrUDOwTuMBgAClCEAApog6Ep3hdlbdFG1aTYE"
    await message.answer_sticker(sticker_id)
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!", reply_markup=await kb.get_start_menu(rights="user"))


@user.message(F.text == "üö´–û—Ç–º–µ–Ω–∞")
async def btn_cancel_click(message: Message, state: FSMContext):
    await state.set_state(EventSignUp.event_name)
    await message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=await kb.get_event_menu(rights="user", event_status="unsigned"))


@user.message(F.text == "üë§–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def btn_contacts_click(message: Message):
    await message.answer("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=kb.our_contacts)


@user.message(F.text == "üíª–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def btn_support_click(message: Message):
    await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:", reply_markup=kb.tech_support)


@user.message(F.text == "üéâ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def btn_events_click(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if await get_count_of_events() == 0:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
                             reply_markup=await kb.get_events_names_buttons())


@user.message(F.text == "üëà–ù–∞–∑–∞–¥")
async def btn_back_click(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=await kb.get_start_menu(rights="user"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π


@user.message(F.text == "üîÑ–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def refresh_registered_users(message: Message, state: FSMContext):
    data = await state.get_data()
    event_name = data.get('event_name')
    if event_name:
        await btn_event_name_click(message, state, event_name)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ.")


@user.message(EventCheck())
async def btn_event_name_click(message: Message, state: FSMContext, event_name: str = None):
    event_info_for_message = '''üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}
üìÜ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event_date}</b>
üéä–û–ø–∏—Å–∞–Ω–∏–µ: {event_desc}
üë§–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: <b>{event_limit} –∏–≥—Ä–æ–∫–æ–≤</b>
‚úèÔ∏è–ó–∞–ø–∏—Å—å: {is_signup_open_str}\n'''

    user_data_str = '''           
üìÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ :
üë§–§.–ò: {signup_user_full_name}
üìû–¢–µ–ª–µ—Ñ–æ–Ω: {signup_user_phone}\n'''

    registered_users_str = "\n–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{registered_users_list}\n"

    if event_name is None:
        event_name = message.text
        await state.set_state(EventSignUp.event_name)
        await state.update_data(event_name=event_name)
        await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")

    await state.set_state(EventSignUp.event_name)
    chat_id = message.from_user.id
    event_info = await get_event_info_by_name(event_name=event_name)
    event_date = event_info.date
    event_desc = event_info.description
    event_limit = event_info.limit
    is_signup_open = await check_is_signup_open(event_name=event_name)
    is_signup_open_str = "–æ—Ç–∫—Ä—ã—Ç–∞" if is_signup_open is not None else "–∑–∞–∫—Ä—ã—Ç–∞"
    event_status = 'unsigned' if is_signup_open is not None else ''

    # Get the list of registered users
    registered_users = await get_signup_people(event_name=event_name)

    # Create a string with the list of registered users
    registered_users_list = ""
    for i, (name, phone, _) in enumerate(zip(registered_users["–ü–æ–ª–Ω–æ–µ –∏–º—è"], registered_users["–¢–µ–ª–µ—Ñ–æ–Ω"], registered_users["–ê–π–¥–∏ —á–∞—Ç–∞"]), 1):
        registered_users_list += f"{i}. {name} - {phone}\n"
    registered_users_str = registered_users_str.format(
        registered_users_list=registered_users_list)

    if await check_signup(event_name=event_name, chat_id=chat_id) is None:
        await message.answer(
            event_info_for_message.format(event_name=event_name, event_date=event_date, event_desc=event_desc, is_signup_open_str=is_signup_open_str, event_limit=event_limit) +
            registered_users_str,
            parse_mode="HTML",
            reply_markup=await kb.get_event_menu(rights="user", event_status=event_status, event_name=event_name)
        )
    else:
        full_info_about_signup_user = await get_full_info_about_singup_user(event_name=event_name, chat_id=chat_id)
        signup_user_full_name = full_info_about_signup_user.full_name
        signup_user_phone = full_info_about_signup_user.phone

        if await check_go_to_event(event_name=event_name, chat_id=chat_id) is not None:
            await message.answer(
                event_info_for_message.format(event_name=event_name, event_date=event_date, event_desc=event_desc, is_signup_open_str=is_signup_open_str, event_limit=event_limit) +
                "üõé–°—Ç–∞—Ç—É—Å : –ø–æ–π–¥—É\n" +
                registered_users_str,
                parse_mode="HTML",
                reply_markup=await kb.get_event_menu(rights="user", event_status="signed", event_name=event_name)
            )
        else:
            await message.answer(
                event_info_for_message.format(event_name=event_name, event_date=event_date, event_desc=event_desc, is_signup_open_str=is_signup_open_str, event_limit=event_limit) +
                user_data_str.format(signup_user_full_name=signup_user_full_name, signup_user_phone=signup_user_phone) +
                f"\nüõé–°—Ç–∞—Ç—É—Å : –Ω–µ –ø–æ–π–¥—É"
                f"\n\n{registered_users_str}",
                parse_mode="HTML",
                reply_markup=await kb.get_event_menu(rights="user", event_name=event_name)
            )


@user.message(F.text == "‚ùå–Ø –Ω–µ –ø—Ä–∏–¥—É", EventSignUp.event_name)
async def btn_dont_go_to_the_event_click(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    chat_id = message.from_user.id
    if await check_signup(event_name=event_name, chat_id=chat_id) is None:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
    else:
        if await check_go_to_event(event_name=event_name, chat_id=chat_id) is not None:
            await state.update_data(id=chat_id)
            await message.answer("–í—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–π–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?"
                                 "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ"
                                 " –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", reply_markup=await kb.get_confirm_menu("cofirm_dont_go_to_event"))
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!")

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ


@user.callback_query(EventSignUp.event_name)
async def confirm_signup_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "cofirm_dont_go_to_event":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        chat_id: str = data_from_state.get("id")
        await change_signup_status(event_name=event_name, chat_id=chat_id)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!", reply_markup=await kb.get_events_names_buttons())
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ!",
                                      reply_markup=await kb.get_event_menu(rights="user", event_status="signed"))

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


@user.message(F.text == "üîô–ù–∞–∑–∞–¥")
async def btn_exit_from_events_click(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞–∑–∞–¥", reply_markup=await kb.get_events_names_buttons())


@user.message(F.text == "üìù–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", EventSignUp.event_name)
async def btn_signup_click(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞-–ª–∏ –∑–∞–ø–∏—Å—å
    if await check_is_signup_open(event_name=event_name) is not None:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ
        if await check_signup(event_name=event_name, chat_id=message.from_user.id) is None:
            # Check if the event has reached its limit
            current_signups = len(await get_signup_people(event_name=event_name))
            event_info = await get_event_info_by_name(event_name=event_name)
            if current_signups < event_info.limit:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!\n–ü—Ä–∏–º–µ—Ä : –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                                     reply_markup=await kb.get_user_cancel_button())
                await state.set_state(EventSignUp.full_name)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ!")
    else:
        await message.answer("–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!")


@user.message(EventSignUp.full_name)
async def wait_full_name(message: Message, state: FSMContext):
    if message.text is not None and search(compile("^[–∞-—è—ë–ê-–Ø–Å]{3,25}? [–∞-—è—ë–ê-–Ø–Å]{3,25}?$"), message.text):
        await state.update_data(full_name=message.text)
        await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìû–û—Ç–ø—Ä–∞–≤–∏—Ç—å' ",
                             reply_markup=await kb.get_user_cancel_button(addition="phone"))
        await state.set_state(EventSignUp.phone)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ.–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")


@user.message(EventSignUp.phone)
async def wait_phone(message: Message, state: FSMContext):
    if message.contact is not None:
        await state.update_data(phone=message.contact.phone_number)
        await state.update_data(id=message.from_user.id)
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        full_name: str = data_from_state.get("full_name")
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
                             f"\nüéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {event_name}"
                             f"\nüìí–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : "
                             f"\nüë§–§.–ò : {full_name}"
                             f"\nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : {message.contact.phone_number}",
                             reply_markup=await kb.get_confirm_menu("confirm_signup"))
        await state.set_state(EventSignUp.confirm)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
                             reply_markup=await kb.get_user_cancel_button(addition="phone"))

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


@user.callback_query(EventSignUp.confirm)
async def confirm_signup_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "confirm_signup":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        user_full_name: str = data_from_state.get("full_name")
        user_phone: str = data_from_state.get("phone")
        user_chat_id: str = data_from_state.get("id")
        await add_signup_user(event_name=event_name, full_name=user_full_name, phone=user_phone, chat_id=user_chat_id)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!", reply_markup=await kb.get_events_names_buttons())
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –∑–∞–ø–∏—Å—å!\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!",
                                      reply_markup=await kb.get_user_cancel_button())
        await state.set_state(EventSignUp.full_name)
