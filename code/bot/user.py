# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
import bot.keyboards as kb

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
from aiogram import Router,F
from aiogram.types import Message,CallbackQuery
from aiogram.filters import Command,CommandStart,Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State,StatesGroup
from database.requests import (addUserInMailing,checkBan,checkEventByName,getDescEventByName,
                               insertSignUpUser,checkSignUp,checkWontCome,getLastFirstNames,
                               updateWontCome)
from re import compile,search

# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å dispatcher 2-–π —Ä–∞–∑ –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä
user = Router()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
class BannedProtect(Filter):
    async def __call__(self,message : Message):
        return await checkBan(message.from_user.id)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
class EventCheck(Filter):
    async def __call__(self,message : Message):
        return await checkEventByName(message.text)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
class EventSign(StatesGroup):
    event = State()
    firstLastNames = State()
    id = State()
    phone = State()
    email = State()
    confirm = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user.message(BannedProtect())
async def showBannedMessage(message : Message):
    await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç 
@user.message(CommandStart())
async def showStartMenu(message : Message):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    await addUserInMailing(message.from_user.id)
    await message.answer_sticker("CAACAgIAAxkBAAEDJLZlt3nrHgcV-CbOkU3EuAhDVSg4GQACkQ8AAo7aAAFIhPeRyUFm2n40BA")
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,{message.from_user.first_name}!",reply_markup=kb.userMenu)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@user.message(F.text == "üö´–û—Ç–º–µ–Ω–∞")
async def btnCancelClick(message : Message,state : FSMContext):
    await state.set_state(EventSign.event)
    await message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=kb.eventUnSignUp)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞–π–¥–∏
@user.message(Command("id"))
async def showUserId(message : Message):
    await message.answer(f"–í–∞—à –∞–π–¥–∏: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
@user.message(F.text == "üë§–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def btnContactsClick(message : Message):
    await message.answer("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",reply_markup=kb.ourContacts)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞
@user.message(F.text == "üíª–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def btnSupportClick(message : Message):
    await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:",reply_markup=kb.techSupport)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@user.message(F.text == "üéâ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def btnEventsClick(message : Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    if await kb.getEventsButtons() is False:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!")
    else:
        await message.answer("–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!",reply_markup=await kb.getEventsButtons())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@user.message(F.text == "üëà–ù–∞–∑–∞–¥")
async def showUserMenu(message : Message,state : FSMContext):
    await state.clear()
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é",reply_markup=kb.userMenu)

# –û–±—Ä–∞–±–æ–∫—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@user.message(EventCheck())
async def showEventInfo(message : Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è-–ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await state.set_state(EventSign.event)
    await state.update_data(event = message.text)
    if await checkSignUp(message.text,message.from_user.id) is None:
        await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")
        await message.answer(f"üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {message.text}\nüéä–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {(await getDescEventByName(message.text)).description}",reply_markup=kb.eventUnSignUp) 
    else:
        if await checkWontCome(message.text,message.from_user.id) != None:
            await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")
            await message.answer(f"üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {message.text}\nüéä–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {(await getDescEventByName(message.text)).description}\nüìÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : {list(await getLastFirstNames(message.text,message.from_user.id))[0]} \nüõé–°—Ç–∞—Ç—É—Å : –ø–æ–π–¥—É",reply_markup=kb.eventSignUp)
        else:
            await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")
            await message.answer(f"üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {message.text}\nüéä–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {(await getDescEventByName(message.text)).description}\nüìÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : {list(await getLastFirstNames(message.text,message.from_user.id))[0]}\nüõé–°—Ç–∞—Ç—É—Å : –Ω–µ –ø–æ–π–¥—É",reply_markup=kb.eventBack)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏        
@user.message(F.text == "‚ùå–Ø –Ω–µ –ø—Ä–∏–¥—É",EventSign.event)
async def btnDidntComeClick(message : Message,state : FSMContext):
    data = await state.get_data()
    event = data.get("event")
    if await checkSignUp(event,message.from_user.id) is None:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
    else:
        if await checkWontCome(event,message.from_user.id) is not None:
            await message.answer("–í—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–π–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",reply_markup=kb.confirmWontCome)
            await state.update_data(User_id = message.from_user.id)
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!")

# –û–±—Ä–∞–±–æ–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@user.callback_query(EventSign.event)
async def confirmaSignUpCallback(callback : CallbackQuery, state : FSMContext):
    if callback.data == "confirmWontCome": 
        data = await state.get_data()
        event = data.get("event")
        id = data.get("User_id")
        await callback.message.delete()
        await updateWontCome(event,id)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!",reply_markup=await kb.getEventsButtons())
        await state.clear()
    else:
        await callback.message.delete()
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ!",reply_markup=kb.eventSignUp)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@user.message(F.text == "üîô–ù–∞–∑–∞–¥")
async def showAllEvents(message : Message, state:FSMContext):
    await state.clear()
    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞–∑–∞–¥",reply_markup=await kb.getEventsButtons())

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
@user.message(F.text == "üìù–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",EventSign.event)
async def getUserData(message : Message,state : FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–≤—ã—á –Ω–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –ª–∏ —É–∂–µ
    data = await state.get_data()
    event = data.get("event")
    if await checkSignUp(event,message.from_user.id) is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!\n–ü—Ä–∏–º–µ—Ä : –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",reply_markup=kb.userCancelMarkup)
        await state.set_state(EventSign.firstLastNames)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ!")

# –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ñ.–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user.message(EventSign.firstLastNames)
async def waitFirstLastNames(message: Message,state:FSMContext):   
    if message.text != None and search(compile("^[–∞-—è—ë–ê-–Ø–Å]{3,25} [–∞-—è—ë–ê-–Ø–Å]{3,25}$"),message.text):
        await state.update_data(firstLastNames = message.text)  
        await state.update_data(id = message.from_user.id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü—Ä–∏–º–µ—Ä : +78005553535",reply_markup=kb.userCancelMarkup)
        await state.set_state(EventSign.phone)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ.–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

# –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user.message(EventSign.phone)
async def waitPhone(message : Message,state : FSMContext):
    if message.text != None and search(compile("^[+]7[0-9]{10}?$"),message.text):
        await state.update_data(phone = message.text)  
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É!\n–ü—Ä–∏–º–µ—Ä DanilovSemen@gmail.com",reply_markup=kb.userCancelMarkup)
        await state.set_state(EventSign.email)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",reply_markup=kb.userCancelMarkup)

# –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ—á—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user.message(EventSign.email)
async def waiiEmail(message : Message,state : FSMContext):
    if message.text != None and search(compile("^[a-zA-Z0-9.]{1,60}@[a-zA-Z]{1,10}.[a-zA-Z]{2,3}$"),message.text):
      await state.update_data(email = message.text)
      data = await state.get_data()
      event = data.get("event")
      FirstLastNames = data.get("firstLastNames")
      phone = data.get("phone")
      email = data.get("email")
      await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {event}\n–§–∞–º–∏–ª–∏—è –∏ –∏–º—è : {FirstLastNames}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : {phone}\n–ü–æ—á—Ç–∞ : {email}",reply_markup=kb.confirmSignUp)
      await state.set_state(EventSign.confirm)
    else:
      await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@user.callback_query(EventSign.confirm)
async def confirmaSignUpCallback(callback : CallbackQuery, state : FSMContext):
    if callback.data == "confirmSignUp": # —É–¥–∞–ª—è–µ–º
        data = await state.get_data()
        event = data.get("event")
        firstLast = data.get("firstLastNames")
        phone = data.get("phone")
        email = data.get("email")
        id = data.get("id")
        await callback.message.delete()
        await insertSignUpUser(event,firstLast,phone,email,id)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!",reply_markup=await kb.getEventsButtons())
        await state.clear()
    else:
        await callback.message.delete()
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –∑–∞–ø–∏—Å—å!\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è!",reply_markup=kb.userCancelMarkup)
        await state.set_state(EventSign.firstLastNames)
